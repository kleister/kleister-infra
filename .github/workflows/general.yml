---
name: general

"on":
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        id: source
        uses: actions/checkout@v4

      - name: Setup terraform
        id: terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform format
        id: fmt
        run: bin/terraform fmt -no-color -check

      - name: Terraform init
        id: init
        env:
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: bin/terraform init -no-color -input=false

      - name: Terraform validate
        id: validate
        env:
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: bin/terraform validate -no-color
        continue-on-error: true

      - name: Terraform plan
        id: plan
        env:
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: bin/terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform comment
        id: comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format \`${{ steps.fmt.outcome }}\`
            <details><summary>Output</summary>

            \`\`\`
            ${{ steps.fmt.outputs.stdout }}
            \`\`\`
            </details>

            #### Terraform Init \`${{ steps.init.outcome }}\`
            <details><summary>Output</summary>

            \`\`\`
            ${{ steps.init.outputs.stdout }}
            \`\`\`
            </details>

            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            <details><summary>Output</summary>

            \`\`\`
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>

            #### Terraform Plan \`${{ steps.plan.outcome }}\`
            <details><summary>Output</summary>

            \`\`\`
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform status
        id: status
        if: steps.validate.outcome == 'failure' || steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform apply
        id: apply
        env:
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: bin/terraform apply -no-color -input=false -auto-approve

...
